; ModuleID = 'grace'
source_filename = "grace"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%frame___start.main = type { %frame___start*, i32 }
%frame___start = type {}
%frame___start.main.aux = type { %frame___start.main*, i32* }
%frame___start.main.rec = type { %frame___start.main* }

declare void @writeInteger(i32)

declare void @writeChar(i8)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i8 @readChar()

declare void @readString(i32, i8*)

declare i32 @ascii(i8)

declare i8 @chr(i32)

declare i32 @strlen(i8*)

declare i32 @strcmp(i8*, i8*)

declare void @strcpy(i8*, i8*)

declare void @strcat(i8*, i8*)

define void @_start.main.aux(%frame___start.main* %0, i32* %1) {
entry:
  %frame_struct = alloca %frame___start.main.aux, align 8
  %param_ptr = getelementptr inbounds %frame___start.main.aux, %frame___start.main.aux* %frame_struct, i32 0, i32 0
  store %frame___start.main* %0, %frame___start.main** %param_ptr, align 8
  %param_ptr1 = getelementptr inbounds %frame___start.main.aux, %frame___start.main.aux* %frame_struct, i32 0, i32 1
  store i32* %1, i32** %param_ptr1, align 8
  %element_ptr = getelementptr inbounds %frame___start.main.aux, %frame___start.main.aux* %frame_struct, i32 0, i32 1
  %b = load i32*, i32** %element_ptr, align 8
  %l_value = load i32, i32* %b, align 4
  %eq = icmp eq i32 %l_value, 1
  br i1 %eq, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  br label %merge

merge:                                            ; preds = %else
  %link_ptr = getelementptr inbounds %frame___start.main.aux, %frame___start.main.aux* %frame_struct, i32 0, i32 0
  %link = load %frame___start.main*, %frame___start.main** %link_ptr, align 8
  call void @_start.main.rec(%frame___start.main* %link)
  ret void
}

define void @_start.main.rec(%frame___start.main* %0) {
entry:
  %frame_struct = alloca %frame___start.main.rec, align 8
  %param_ptr = getelementptr inbounds %frame___start.main.rec, %frame___start.main.rec* %frame_struct, i32 0, i32 0
  store %frame___start.main* %0, %frame___start.main** %param_ptr, align 8
  %link_ptr = getelementptr inbounds %frame___start.main.rec, %frame___start.main.rec* %frame_struct, i32 0, i32 0
  %link = load %frame___start.main*, %frame___start.main** %link_ptr, align 8
  %element_ptr = getelementptr inbounds %frame___start.main, %frame___start.main* %link, i32 0, i32 1
  store i32 1, i32* %element_ptr, align 4
  %link_ptr1 = getelementptr inbounds %frame___start.main.rec, %frame___start.main.rec* %frame_struct, i32 0, i32 0
  %link2 = load %frame___start.main*, %frame___start.main** %link_ptr1, align 8
  %element_ptr3 = getelementptr inbounds %frame___start.main, %frame___start.main* %link2, i32 0, i32 1
  %link_ptr4 = getelementptr inbounds %frame___start.main.rec, %frame___start.main.rec* %frame_struct, i32 0, i32 0
  %link5 = load %frame___start.main*, %frame___start.main** %link_ptr4, align 8
  call void @_start.main.aux(%frame___start.main* %link5, i32* %element_ptr3)
  ret void
}

define void @_start.main(%frame___start* %0) {
entry:
  %frame_struct = alloca %frame___start.main, align 8
  %param_ptr = getelementptr inbounds %frame___start.main, %frame___start.main* %frame_struct, i32 0, i32 0
  store %frame___start* %0, %frame___start** %param_ptr, align 8
  call void @_start.main.rec(%frame___start.main* %frame_struct)
  ret void
}

define i32 @_start() {
entry:
  %frame_struct = alloca %frame___start, align 8
  call void @_start.main(%frame___start* %frame_struct)
  ret i32 0
}
