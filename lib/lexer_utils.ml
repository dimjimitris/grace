(* token hashtable used to reduce the states of the DFA generated by ocamllex *)
let keyword_table =
    let keywords = [
      (* logical operators *)
      ("and", Tokens.AND);
      ("or", Tokens.OR);
      ("not", Tokens.NOT);

      (* (some) arithmetic operators *)
      ("div", Tokens.DIV);
      ("mod", Tokens.MOD);

      (* statement keywords *)
      ("var", Tokens.VAR);
      ("fun", Tokens.FUN);
      ("ref", Tokens.REF);
      ("return", Tokens.RETURN);
      ("if", Tokens.IF);
      ("then", Tokens.THEN);
      ("else", Tokens.ELSE);
      ("while", Tokens.WHILE);
      ("do", Tokens.DO);

      (* reserved type names *)
      ("char", Tokens.CHAR);
      ("int", Tokens.INT);
      ("nothing", Tokens.NOTHING);
    ] in
    let tbl = Hashtbl.create (List.length keywords) in
    List.iter (fun (key, value) -> Hashtbl.add tbl key value) keywords;
    tbl

let get_loc lexbuf = (lexbuf.Lexing.lex_start_p, lexbuf.Lexing.lex_curr_p)

let string_of_token = function
  | Tokens.CHAR -> "char"
  | Tokens.INT -> "int"
  | Tokens.NOTHING -> "nothing"
  | Tokens.LIT_CHAR c -> Printf.sprintf "lit_char (%c)" c
  | Tokens.LIT_INT i -> Printf.sprintf "lit_int (%d)" i
  | Tokens.LIT_STR s -> Printf.sprintf "lit_str (%s)" s
  | Tokens.ID i -> Printf.sprintf "id (%s)" i
  | Tokens.VAR -> "var"
  | Tokens.FUN -> "fun"
  | Tokens.REF -> "ref"
  | Tokens.RETURN -> "return"
  | Tokens.IF -> "if"
  | Tokens.THEN -> "then"
  | Tokens.ELSE -> "else"
  | Tokens.WHILE -> "while"
  | Tokens.DO -> "do"
  | Tokens.EQ -> "equal"
  | Tokens.NOT_EQ -> "not_equal"
  | Tokens.GREATER -> "greater"
  | Tokens.LESSER -> "lesser"
  | Tokens.GREATER_EQ -> "greater_equal"
  | Tokens.LESSER_EQ -> "lesser_equal"
  | Tokens.AND -> "and"
  | Tokens.OR -> "or"
  | Tokens.NOT -> "not"
  | Tokens.PLUS -> "plus"
  | Tokens.MINUS -> "minus"
  | Tokens.MULT -> "star"
  | Tokens.DIV -> "div"
  | Tokens.MOD -> "mod"
  | Tokens.LEFT_PAR -> "lparen"
  | Tokens.RIGHT_PAR -> "rparen"
  | Tokens.LEFT_BRACKET -> "lbracket"
  | Tokens.RIGHT_BRACKET -> "rbracket"
  | Tokens.LEFT_CURL -> "lbrace"
  | Tokens.RIGHT_CURL -> "rbrace"
  | Tokens.COMMA -> "comma"
  | Tokens.COLON -> "colon"
  | Tokens.SEMICOLON -> "semicolon"
  | Tokens.ASSIGN -> "larrow"
  | Tokens.EOF -> "eof"
