(* token hashtable used to reduce the states of the Finite Automaton generated by ocamllex *)
open Tokens

let keyword_table =
  let create_hashtable size init =
    let tbl = Hashtbl.create size in
    List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
    tbl
  in
  create_hashtable 17
    [
      ("and", AND);
      ("char", CHAR);
      ("div", DIV);
      ("do", DO);
      ("else", ELSE);
      ("fun", FUN);
      ("if", IF);
      ("int", INT);
      ("mod", MOD);
      ("not", NOT);
      ("nothing", NOTHING);
      ("or", OR);
      ("ref", REF);
      ("return", RETURN);
      ("then", THEN);
      ("var", VAR);
      ("while", WHILE);
    ]

let get_loc lexbuf = (lexbuf.Lexing.lex_start_p, lexbuf.Lexing.lex_curr_p)

let string_of_token = function
  | CHAR -> "char"
  | INT -> "int"
  | NOTHING -> "nothing"
  | LIT_CHAR c -> Printf.sprintf "char_lit (%c)" c
  | LIT_INT i -> Printf.sprintf "int_lit (%d)" i
  | LIT_STR s -> Printf.sprintf "str_lit (%s)" s
  | ID i -> Printf.sprintf "id (%s)" i
  | VAR -> "var"
  | FUN -> "fun"
  | REF -> "ref"
  | RETURN -> "return"
  | IF -> "if"
  | THEN -> "then"
  | ELSE -> "else"
  | WHILE -> "while"
  | DO -> "do"
  | EQ -> "equal"
  | NOT_EQ -> "not_equal"
  | MORE -> "greater"
  | LESS -> "lesser"
  | MORE_EQ -> "greater_equal"
  | LESS_EQ -> "lesser_equal"
  | AND -> "and"
  | OR -> "or"
  | NOT -> "not"
  | PLUS -> "plus"
  | MINUS -> "minus"
  | MULT -> "star"
  | DIV -> "div"
  | MOD -> "mod"
  | LEFT_PAR -> "lparen"
  | RIGHT_PAR -> "rparen"
  | LEFT_BRACKET -> "lbracket"
  | RIGHT_BRACKET -> "rbracket"
  | LEFT_CURL -> "lbrace"
  | RIGHT_CURL -> "rbrace"
  | COMMA -> "comma"
  | COLON -> "colon"
  | SEMICOLON -> "semicolon"
  | ASSIGN -> "larrow"
  | EOF -> "eof"
