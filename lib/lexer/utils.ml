(* lexer error handling *)
type pos = (string * int * int)

exception Lex_err of (string * pos)

let print_lex_err (message, (filename, line, col)) : unit =
  let position = Printf.sprintf "File: %s, Line: %d, Column: %d" filename line col in
  prerr_endline ("Lexical error: " ^ message);
  prerr_endline position

let fail s lexbuf =
  let p = lexbuf.Lexing.lex_start_p in
  let pos =
    (p.Lexing.pos_fname,
    p.Lexing.pos_lnum ,
    (p.Lexing.pos_cnum) - (p.Lexing.pos_bol))
  in raise (Lex_err (s, pos))

(* token hashtable used to reduce the states of the Finite Automaton generated by ocamllex *)
open Tokens_lib.Tokens

let keyword_table = 
  let
    create_hashtable size init =
      let tbl = Hashtbl.create size in
      List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
      tbl
  in
  create_hashtable 17 [
    ("and",       AND     );
    ("char",      CHAR    );
    ("div",       DIV     );
    ("do",        DO      );
    ("else",      ELSE    );
    ("fun",       FUN     );
    ("if",        IF      );
    ("int",       INT     );
    ("mod",       MOD     );
    ("not",       NOT     );
    ("nothing",   NOTHING );
    ("or",        OR      );
    ("ref",       REF     );
    ("return",    RETURN  );
    ("then",      THEN    );
    ("var",       VAR     );
    ("while",     WHILE   );
  ]